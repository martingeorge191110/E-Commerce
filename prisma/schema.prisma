generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Customers {
  id                 String    @id @default(uuid())
  first_name         String
  second_name        String
  email              String    @unique
  password           String
  phone              String?   @unique @db.VarChar(150)
  pass_code          String?
  exp_date           DateTime?
  avatar             String?
  currency           String?
  email_notification Boolean   @default(dbgenerated("(true)"))
  sms_notification   Boolean   @default(dbgenerated("(true)"))
  allow_send_updates Boolean   @default(dbgenerated("(false)"))
  active             Boolean   @default(dbgenerated("(false)"))
  created_at         DateTime  @default(now())
  updated_at         DateTime  @updatedAt
  profile_completed  Boolean   @default(dbgenerated("(false)"))
  orders             Orders[]
}

model Orders {
  id             String        @id @default(uuid())
  customer_id    String
  delivery_id    String?
  store_id       String?
  type           OrderType     @default(DELIVERY)
  status         OrderStatus   @default(PENDING)
  payment_method PaymentMethod @default(CASH)
  paid           Boolean?      @default(false)
  address        String?
  total_price    Float
  created_at     DateTime      @default(now()) @db.DateTime(3)
  updated_at     DateTime      @updatedAt @db.DateTime(3)

  delivery   Employees?   @relation(fields: [delivery_id], references: [id], onDelete: SetNull, onUpdate: Cascade)
  customer   Customers    @relation(fields: [customer_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
  store      Stores?      @relation(fields: [store_id], references: [id], onDelete: SetNull)
  orderItems OrderItems[]
}

model OrderItems {
  order_id String
  item_id  String
  quantity Int
  price    Float

  order   Orders   @relation(fields: [order_id], references: [id], onUpdate: Cascade)
  product Products @relation(fields: [item_id], references: [id], onDelete: Restrict, onUpdate: Cascade)

  @@unique([order_id, item_id], name: "Order_Items_order_id_item_id_key")
}

model Stores {
  id         String      @id @default(uuid())
  name       String
  location   String
  manager_id String?     @unique
  created_at DateTime    @default(now())
  updated_at DateTime    @updatedAt
  employees  Employees[] @relation("Store_Employees")
  stock      Stock[]
  manager    Employees?  @relation("Store_Manager", fields: [manager_id], references: [id])
  orders     Orders[]
}

model Employees {
  id                String              @id @default(uuid())
  first_name        String
  last_name         String
  email             String              @unique
  phone             String?             @unique
  position          String?
  hire_date         DateTime            @default(now())
  store_id          String?
  created_at        DateTime            @default(now())
  updated_at        DateTime            @updatedAt
  age               Int
  current_rate      Float               @default(0)
  employment_status Employment_Statuses
  employment_type   Employement_Types
  salary            Float
  avatar            String?
  role              Access_Roles?       @relation("Role_Employee")
  store_employee    Stores?             @relation("Store_Employees", fields: [store_id], references: [id])
  store_manager     Stores?             @relation("Store_Manager")
  delivery          Orders[]

  @@index([store_id], map: "Employees_store_id_fkey")
}

model Access_Roles {
  id                    String                 @id @default(uuid())
  role                  Titles
  description           String                 @db.LongText
  user_id               String                 @unique
  created_at            DateTime               @default(now())
  updated_at            DateTime               @updatedAt
  password              String
  sign_in_email         String                 @unique
  exp_date              DateTime?
  pass_code             String?
  employee              Employees              @relation("Role_Employee", fields: [user_id], references: [id], onDelete: Cascade)
  permissions           Permission[]
  Products              Products[]             @relation("Added_Product")
  notification_received System_Notifications[] @relation("receiving_notification")
  notification_sent     System_Notifications[] @relation("sending_notification")
}

model Permission {
  employee_id String
  permission  Role_Permision
  emplyee     Access_Roles   @relation(fields: [employee_id], references: [id], onDelete: Cascade)

  @@unique([employee_id, permission])
}

model Products {
  id            String       @id @default(uuid())
  name          String
  description   String?
  category      Categories
  company       Companies
  quantity      Int
  price         Float
  all_cost      Float
  cost_per_unit Float
  is_available  Boolean      @default(dbgenerated("(true)"))
  shipped_date  DateTime     @default(now())
  updated_at    DateTime     @updatedAt
  employee_id   String
  employee      Access_Roles @relation("Added_Product", fields: [employee_id], references: [id])
  Stock         Stock[]
  OrderItems    OrderItems[]

  @@index([employee_id], map: "Products_employee_id_fkey")
}

model Stock {
  quantity              Int
  product_id            String
  shipped_to_store_date DateTime @default(now())
  store_id              String
  product               Products @relation(fields: [product_id], references: [id])
  store                 Stores   @relation(fields: [store_id], references: [id])

  @@unique([store_id, product_id])
}

model System_Notifications {
  id          String              @id @default(uuid())
  sender_id   String
  receiver_id String
  content     String
  created_at  DateTime            @default(now())
  status      Notification_Status @default(PENDING)
  type        Notification_Type
  updated_at  DateTime            @updatedAt
  receiver    Access_Roles        @relation("receiving_notification", fields: [receiver_id], references: [id])
  sender      Access_Roles        @relation("sending_notification", fields: [sender_id], references: [id])

  @@index([receiver_id], map: "System_Notifications_receiver_id_fkey")
  @@index([sender_id], map: "System_Notifications_sender_id_fkey")
}

enum Titles {
  ADMIN
  MANAGER
  AUTHOR
  CUSTOMER_SERVICE
  INVENTORY_MANAGER
  MARKETING_SPECIALIST
  SALES_REPRESENTATIVE
  DATA_ANALYST
  DEVELOPER
  PRODUCT_MANAGER
  SHIPPING_MANAGER
  HR_MANAGER
  ACCOUNTANT
  TECH_SUPPORT
  CONTENT_EDITOR
  QUALITY_ASSURANCE
}

enum Role_Permision {
  CREATE_USER
  EDIT_USER
  DELETE_USER
  VIEW_USER
  CREATE_PRODUCT
  EDIT_PRODUCT
  DELETE_PRODUCT
  VIEW_PRODUCT
  MANAGE_INVENTORY
  VIEW_INVENTORY
  PROCESS_ORDER
  VIEW_ORDER
  HANDLE_PAYMENT
  VIEW_PAYMENT_HISTORY
  MANAGE_SHIPPING
  TRACK_ORDER
  VIEW_REPORTS
  GENERATE_REPORTS
  MANAGE_DISCOUNTS
  VIEW_PROMOTIONS
  MANAGE_SETTINGS
  ACCESS_ANALYTICS
  SEND_NOTIFICATIONS
  MANAGE_ROLES
  ACCESS_ADMIN_PANEL
}

enum Employement_Types {
  FULLTIME
  PARTTIME
  CONTRACT
  INTERN
}

enum Employment_Statuses {
  ACTRIVE
  ONLEAVE
  TERMINATED
}

enum Categories {
  ELECTRONICS
  FASHION
  HOME_AND_KITCHEN
  SPORTS_AND_OUTDOORS
  BEAUTY_AND_HEALTH
  TOYS_AND_GAMES
  AUTOMOTIVE
  BOOKS
  GROCERIES
  PET_SUPPLIES
  OFFICE_SUPPLIES
  MUSIC_AND_INSTRUMENTS
  JEWELRY
  GARDEN_AND_OUTDOOR
}

enum Companies {
  APPLE
  NIKE
  SAMSUNG
  IKEA
  ADIDAS
  WHIRLPOOL
  HASBRO
  MATTEL
  PETCO
  GNC
  AMAZON
  COSTCO
  WALMART
  OFFICE_DEPOT
  STAPLES
  ZARA
  SONY
  FENDER
  BOSTON_ACCENT
  BLACK_AND_DECKER
  HUNTER
  BOSCH
}

enum Notification_Type {
  MESSAGE
  ALERT
  REMINDER
}

enum Notification_Status {
  PENDING
  SENT
  READ
}

enum OrderType {
  STORE
  DELIVERY
}

enum OrderStatus {
  PENDING
  CANCELED
  RECEIVED
}

enum PaymentMethod {
  CARD
  CASH
}
