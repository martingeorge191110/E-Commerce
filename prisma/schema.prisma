generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Titles {
  ADMIN // Admin users with full access
  MANAGER // Managers overseeing operations
  AUTHOR // Content creators or product authors
  CUSTOMER_SERVICE // Customer service representatives
  INVENTORY_MANAGER // Responsible for managing inventory
  MARKETING_SPECIALIST // Focused on marketing strategies and campaigns
  SALES_REPRESENTATIVE // Sales personnel interacting with customers
  DATA_ANALYST // Analyzing sales and user data
  DEVELOPER // Developers maintaining the website and system
  PRODUCT_MANAGER // Managers responsible for product strategy
  SHIPPING_MANAGER // Responsible for shipping and logistics
  HR_MANAGER // Human resources personnel
  ACCOUNTANT // Managing financial records
  TECH_SUPPORT // Technical support for users and staff
  CONTENT_EDITOR // Editors reviewing and publishing content
  QUALITY_ASSURANCE // Ensuring product quality and compliance
}

enum Role_Permision {
  CREATE_USER // Permission to create a new user
  EDIT_USER // Permission to edit existing user information
  DELETE_USER // Permission to delete a user
  VIEW_USER // Permission to view user profiles
  CREATE_PRODUCT // Permission to add new products
  EDIT_PRODUCT // Permission to update existing product details
  DELETE_PRODUCT // Permission to remove a product from the catalog
  VIEW_PRODUCT // Permission to view product details
  MANAGE_INVENTORY // Permission to manage inventory levels
  VIEW_INVENTORY // Permission to view inventory reports
  PROCESS_ORDER // Permission to manage and process customer orders
  VIEW_ORDER // Permission to view order details and history
  HANDLE_PAYMENT // Permission to manage payment processing
  VIEW_PAYMENT_HISTORY // Permission to view payment transaction history
  MANAGE_SHIPPING // Permission to manage shipping options and logistics
  TRACK_ORDER // Permission to track the status of orders
  VIEW_REPORTS // Permission to view sales and performance reports
  GENERATE_REPORTS // Permission to create new reports
  MANAGE_DISCOUNTS // Permission to create and manage discount codes
  VIEW_PROMOTIONS // Permission to view promotional activities
  MANAGE_SETTINGS // Permission to change application settings and configurations
  ACCESS_ANALYTICS // Permission to access user engagement and sales analytics
  SEND_NOTIFICATIONS // Permission to send notifications to users
  MANAGE_ROLES // Permission to manage user roles and permissions
  ACCESS_ADMIN_PANEL // Permission to access administrative features and dashboards
}

enum Employement_Types {
  FULLTIME
  PARTTIME
  CONTRACT
  INTERN
}

enum Employment_Statuses {
  ACTRIVE
  ONLEAVE
  TERMINATED
}

enum Categories {
  ELECTRONICS // e.g., phones, computers, cameras
  FASHION // e.g., clothing, accessories
  HOME_AND_KITCHEN // e.g., furniture, appliances, kitchenware
  SPORTS_AND_OUTDOORS // e.g., fitness equipment, camping gear
  BEAUTY_AND_HEALTH // e.g., skincare, supplements, fitness products
  TOYS_AND_GAMES // e.g., childrenâ€™s toys, video games
  AUTOMOTIVE // e.g., car accessories, tools
  BOOKS // e.g., novels, textbooks
  GROCERIES // e.g., food, beverages
  PET_SUPPLIES // e.g., pet food, toys, grooming supplies
  OFFICE_SUPPLIES // e.g., stationery, office furniture
  MUSIC_AND_INSTRUMENTS // e.g., instruments, music accessories
  JEWELRY // e.g., rings, necklaces, watches
  GARDEN_AND_OUTDOOR // e.g., gardening tools, outdoor furniture
}

enum Companies {
  APPLE // Electronics
  NIKE // Fashion
  SAMSUNG // Electronics, Fashion
  IKEA // Home and Kitchen
  ADIDAS // Fashion, Sports and Outdoors
  WHIRLPOOL // Home and Kitchen
  HASBRO // Toys and Games
  MATTEL // Toys and Games
  PETCO // Pet Supplies
  GNC // Beauty and Health
  AMAZON // Electronics, Fashion, Home and Kitchen, Books, Groceries
  COSTCO // Groceries, Home and Kitchen
  WALMART // Electronics, Fashion, Home and Kitchen, Groceries
  OFFICE_DEPOT // Office Supplies
  STAPLES // Office Supplies
  ZARA // Fashion
  SONY // Electronics, Music and Instruments
  FENDER // Music and Instruments
  BOSTON_ACCENT // Music and Instruments
  BLACK_AND_DECKER // Automotive, Home and Kitchen
  HUNTER // Sports and Outdoors
  BOSCH // Automotive, Home and Kitchen
}

model Customers {
  id                 String    @id @default(uuid())
  first_name         String
  second_name        String
  email              String    @unique
  password           String
  phone              String?   @unique @db.VarChar(150)
  pass_code          String?
  exp_date           DateTime?
  avatar             String?
  currency           String?
  email_notification Boolean   @default(dbgenerated("(true)"))
  sms_notification   Boolean   @default(dbgenerated("(true)"))
  allow_send_updates Boolean   @default(dbgenerated("(false)"))
  active             Boolean   @default(dbgenerated("(false)"))
  created_at         DateTime  @default(now())
  updated_at         DateTime  @updatedAt
  profile_completed  Boolean   @default(dbgenerated("(false)"))
}

model Stores {
  id         String      @id @default(uuid())
  name       String
  location   String
  manager_id String?     @unique
  manager    Employees?  @relation("Store_Manager", fields: [manager_id], references: [id], onUpdate: Cascade)
  employees  Employees[] @relation("Store_Employees")
  created_at DateTime    @default(now())
  updated_at DateTime    @updatedAt
  stock      Stock[]
}

model Employees {
  id                String              @id @default(uuid())
  first_name        String
  last_name         String
  email             String              @unique
  phone             String?             @unique
  age               Int
  position          String?
  salary            Float
  hire_date         DateTime            @default(now())
  employment_type   Employement_Types
  employment_status Employment_Statuses
  current_rate      Float               @default(0)
  store_id          String?
  store_manager     Stores?             @relation("Store_Manager")
  role              Access_Roles?       @relation("Role_Employee")
  store_employee    Stores?             @relation("Store_Employees", fields: [store_id], references: [id])
  created_at        DateTime            @default(now())
  updated_at        DateTime            @updatedAt
}

model Access_Roles {
  id            String       @id @default(uuid())
  role          Titles
  sign_in_email String       @unique
  password      String
  pass_code     String?
  exp_date      DateTime?
  description   String       @db.LongText
  permissions   Permission[]
  user_id       String       @unique
  employee      Employees    @relation("Role_Employee", fields: [user_id], references: [id], onDelete: Cascade)
  created_at    DateTime     @default(now())
  updated_at    DateTime     @updatedAt
  Products      Products[]   @relation("Added_Product")
}

model Permission {
  employee_id String
  permission  Role_Permision
  emplyee     Access_Roles   @relation(fields: [employee_id], references: [id], onDelete: Cascade)

  @@unique([employee_id, permission])
}

model Products {
  id            String       @id @default(uuid())
  name          String
  description   String?
  category      Categories
  company       Companies
  quantity      Int
  price         Float
  cost_per_unit Float
  all_cost      Float
  is_available  Boolean      @default(dbgenerated("(true)"))
  shipped_date  DateTime     @default(now())
  updated_at    DateTime     @updatedAt
  employee_id   String
  employee      Access_Roles @relation("Added_Product", fields: [employee_id], references: [id])
  Stock         Stock[]
}

model Stock {
  store_id              String
  product_id            String
  quantity              Int
  shipped_to_store_date DateTime @default(now())
  store                 Stores   @relation(fields: [store_id], references: [id], onUpdate: Cascade)
  product               Products @relation(fields: [product_id], references: [id], onUpdate: Cascade)

  @@unique([store_id, product_id])
}
